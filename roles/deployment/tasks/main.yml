---

- name: "logging into private docker registry and force re-authorization."
  environment:
    AWS_ACCESS_KEY_ID: "{{ AWS_ACCESS_KEY_ID }}"
    AWS_SECRET_ACCESS_KEY: "{{ AWS_SECRET_ACCESS_KEY }}"
  become: yes
  shell: "$(aws ecr get-login --no-include-email --region us-east-1)"

- name: Creates directory
  file:
    path: /etc/systemd/system/docker.service.d/
    state: directory

- name: Copy AWS-CREDENTIALS.CONF to instances
  copy:
    dest: /etc/systemd/system/docker.service.d/aws-credentials.conf
    content: |
       [Service]
       Environment="AWS_ACCESS_KEY_ID={{ AWS_ACCESS_KEY_ID }}"
       Environment="AWS_SECRET_ACCESS_KEY={{ AWS_SECRET_ACCESS_KEY }}"

- name: Reload the daemon
  become: true
  shell: systemctl daemon-reload

- name: Restart the docker service
  systemd:
    state: restarted
    name: docker
    daemon_reload: yes

- name: Remove all existing docker containers, volumes and images
  become: true
  shell: |
    docker system prune --all --volumes -f
  register: result_docker_prune

- name: Showing results of removing containers
  debug:
    msg: "{{result_docker_prune}}"

- name: Run docker container test
  become: true
  docker_container:
    name: "{{ project_name }}-tmp"
    image: "{{ IMAGE }}"
    pull: "yes"
    recreate: "yes"
    restart_policy: no
    state: started
    detach: "yes"
    ports: "4000:5000"
    security_opts: no-new-privileges
    log_driver: awslogs
    log_options:
      awslogs-region: "us-east-1"
      awslogs-group: "{{ AWSLOGSGROUP }}"
      awslogs-stream: "{{ AWSLOGSSTREAM }}"
    env:
      DB_CONNECTION: "{{ DB_CONNECTION }}"
      JWT_ISSUER: "{{ JWT_ISSUER }}"
      JWT_AUDIENCE: "{{ JWT_AUDIENCE }}"

- name: Wait for docker container
  become: true
  shell: sleep 30

- name: Test API Status
  block:
    - uri:
        url: http://localhost:4000/api/status
        return_content: yes
      register: this
      failed_when: "'version' not in this.content"
  rescue:
    - docker_container:
        name: "{{ project_name }}-tmp"
        state: stopped
    - fail: msg="API Status didn't pass the test"

- name: Stop a container
  docker_container:
    name: "{{ project_name }}-tmp"
    state: stopped

- name: "run docker container."
  become: true
  docker_container:
    name: "{{ project_name }}"
    image: "{{ IMAGE }}"
    pull: "yes"
    recreate: "yes"
    restart_policy: always
    state: started
    detach: "yes"
    ports: "5000:5000"
    security_opts: no-new-privileges
    log_driver: awslogs
    log_options:
      awslogs-region: "us-east-1"
      awslogs-group: "{{  AWSLOGSGROUP  }}"
      awslogs-stream: "{{ AWSLOGSSTREAM  }}"
    env:
      DB_CONNECTION: "{{  DB_CONNECTION }}"
      JWT_ISSUER: "{{  JWT_ISSUER }}"
      JWT_AUDIENCE: "{{  JWT_AUDIENCE }}"
